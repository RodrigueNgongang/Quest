AWSTemplateFormatVersion: 2010-09-09
Description: Starter template for ECS

Parameters:
  VpcStack:
    Type: String
    Description: Name of VPC stack to build off of
    Default: vpc

  EcsClusterStack:
    Type: String
    Description: Name of ECS Cluster stack to build off of
    Default: ecs-cluster

  Image:
    Type: String
    Description: URI of image you would like to use
  
  SelfSignedCertificateArn:
    Type: String
    Description: Arn of the self signed certificate that was uploaded to aws iam
    Default: 'arn:aws:iam::435731829464:server-certificate/RodrigueCert'

Resources:
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckPort: 3000
      HealthCheckProtocol: HTTP
      Port: 3000
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue: !Sub ${VpcStack}-vpc-id
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Order: 1
          TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn:
        Fn::ImportValue: !Sub ${EcsClusterStack}-alb-arn
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref SelfSignedCertificateArn
    DependsOn:
      - TargetGroup
  
  FargateService:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue: !Sub ${EcsClusterStack}-ecs-cluster
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        -
          ContainerName: rodrigue
          ContainerPort: 3000
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
          AwsvpcConfiguration:
            SecurityGroups:
              -
                Fn::ImportValue: !Sub ${EcsClusterStack}-security-group
            Subnets:
              -
                Fn::ImportValue: !Sub ${VpcStack}-private-subnet-a-id
              -
                Fn::ImportValue: !Sub ${VpcStack}-private-subnet-b-id
      TaskDefinition: !Ref FargateServiceTaskDefinition

  FargateServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7

  FargateServiceTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        -
          Name: rodrigue
          Essential: true
          Image: !Ref Image
          LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref FargateServiceLogGroup
                awslogs-stream-prefix: rodrigue-container
                awslogs-region: !Ref AWS::Region
          PortMappings:
            -
              ContainerPort: 3000
              HostPort: 3000
              Protocol: tcp
      Cpu: '256'
      ExecutionRoleArn:
        Fn::ImportValue: !Sub ${EcsClusterStack}-quest-role
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        -  FARGATE
      TaskRoleArn:
        Fn::ImportValue: !Sub ${EcsClusterStack}-quest-role

Outputs:
  FargateServiceName:
    Description: A reference to the created Fargate Service
    Value: !GetAtt FargateService.Name
    Export:
      Name: !Sub ${AWS::StackName}-fargate-service-name
